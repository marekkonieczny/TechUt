package gamingchair;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import gamingchair.GamingChair;

public class GamingChairManagerJDBC implements GamingChairManager {
	private Connection connection;
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	private String createTableGamingChair = "CREATE TABLE GamingChair(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20) UNIQUE, isComfortable boolean, price decimal(5,2))";
	private PreparedStatement addGamingChairStmt;
	private PreparedStatement deleteAllGamingChairsStmt;
	private PreparedStatement getAllGamingChairsStmt;
	private Statement statement;

	public GamingChairManagerJDBC() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("GamingChair".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableGamingChair);

			addGamingChairStmt = connection.prepareStatement("INSERT INTO GamingChair (name, isComfortable, price) VALUES (?, ?, ?)");
			deleteAllGamingChairsStmt = connection.prepareStatement("DELETE FROM GamingChair");
			getAllGamingChairsStmt = connection.prepareStatement("SELECT id, name, isComfortable, price FROM GamingChair");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	Connection getConnection() {
		return connection;
	}

	void clearGamingChairs() {
		try {
			deleteAllGamingChairsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public int addGamingChair(GamingChair gamingChair) {
		int count = 0;
		try {
			addGamingChairStmt.setString(1, gamingChair.getName());
			addGamingChairStmt.setBoolean(2, gamingChair.getIsComfortable());
			//addGamingChairStmt.setdouble(2, gamingChair.getPrice());

			count = addGamingChairStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	@Override
	public List<GamingChair> getAllGamingChairs() {
		List<GamingChair> gamingChairs = new ArrayList<GamingChair>();

		try {
			ResultSet rs = getAllGamingChairsStmt.executeQuery();

			while (rs.next()) {
				GamingChair gc = new GamingChair();
				gc.setId(rs.getInt("id"));
				gc.setName(rs.getString("name"));
				gc.setIsComfortable(rs.getBoolean("isComfortable"));
				//price
				gamingChairs.add(gc);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return gamingChairs;
	}

	@Override
	public void addAllGamingChairs(List<GamingChair> gamingChairs) {

		try {
			connection.setAutoCommit(false);
			for (GamingChair gamingChair : gamingChairs) {
				addGamingChairStmt.setString(1, gamingChair.getName());
				addGamingChairStmt.setBoolean(2, gamingChair.getIsComfortable());
				addGamingChairStmt.executeUpdate();
			}
			connection.commit();
			
		} catch (SQLException exception) {
			
			try {
				connection.rollback();
			} catch (SQLException e) {
				e.printStackTrace();
				//!!!! ALARM
			}
		}

	}
}
